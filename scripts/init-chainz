#!/bin/bash
progname=$(basename -- "$0")
thisdir=$(dirname -- ${BASH_SOURCE[0]})

DEFAULT_CONFIG=gaia

RELAYER_DIR=$(cd "$thisdir/.." && pwd)
CONFIGS_DIR="$RELAYER_DIR/configs"
DATA="$PWD/data"
CONFFILES=( demo.json )

CHAIN_RE='^([^=]+)=(.+)$'
LINK_RE='^([^:]+):([^:]+)$'

CHAINS=()
LINKS=()

# Ensure jq is installed
if [[ ! -x "$(which jq)" ]]; then
  echo "jq (a tool for parsing json in the command line) is required..."
  echo "https://stedolan.github.io/jq/download/"
  exit 1
fi

nextID=0
generate_id() {
  config=$1
  while true; do
    id="ibc$nextID"
    found=no
    for chain in ${CHAINS[@]}; do
      case $chain in
      "$id="*)
        found=yes
        break
      esac
    done
    if [[ $found != yes ]]; then
      return
    fi
    nextID=$(( $nextID + 1 ))
  done
}

IDS=()
CONFIGS=()
JSONS=()
SRCS=()
DSTS=()

validate() {
  status=0
  # Have at least one default.
  if [[ ${#CHAINS[@]} -eq 0 ]]; then
    generate_id "$DEFAULT_CONFIG"
    CHAINS+=( "$id=$DEFAULT_CONFIG" )
  fi

  for chain in ${CHAINS[@]} LAST_CHAIN; do
    if [[ $chain == LAST_CHAIN ]]; then
      if [[ ${#CHAINS[@]} -ge 2 ]]; then
        # Don't need more config
        break
      fi
      # We need at least two chains, so use the same config.
      config=${CONFIGS[0]}
      generate_id "$config"
      chain="$id=$config"
      CHAINS+=( "$chain" )
    fi
    if [[ $chain =~ $CHAIN_RE ]]; then
      id=${BASH_REMATCH[1]}
      config=${BASH_REMATCH[2]}
      IDS+=( "$id" )
      json=$CONFIGS_DIR/$config/chain.json
      if [[ ! -f $json ]]; then
        echo 1>&2 "$progname: error: CHAIN \`$chain' config \`$json' does not exist"
        status=1
      fi
      CONFIGS+=( "$config" )
      JSONS+=( "$json" )
    else
      echo 1>&2 "$progname: error: invalid CHAIN specification \`$chain'"
      status=1
    fi
  done

  # Default links as a circuit around the chains.
  if [[ ${#LINKS[@]} -eq 0 ]]; then
    prior=
    for id in ${IDS[@]}; do
      if [[ -n $prior ]]; then
        LINKS+=( "$prior:$id" )
      fi
      prior=$id
    done
    if [[ -z $prior ]]; then
      echo 1>&2 "$progname: error: no configured LINKS"
      status=1
    elif [[ $prior != ${IDS[1]} ]]; then
      LINKS+=( "$prior:${IDS[0]}" )
    fi
  fi

  for link in ${LINKS[@]}; do
    if [[ $link =~ $LINK_RE ]]; then
      src=${BASH_REMATCH[1]}
      dst=${BASH_REMATCH[2]}
      found_src=no
      found_dst=no
      for id in ${IDS[@]}; do
        [[ $id == $src ]] && found_src=yes
        [[ $id == $dst ]] && found_dst=yes
      done
      if [[ $found_src != yes ]]; then
        echo 1>&2 "$progname: error: LINK \`$link' source ID \`$src' does not match a CHAIN"
        status=1
      fi
      if [[ $found_dst != yes ]]; then
        echo 1>&2 "$progname: error: LINK \`$link' destination ID \`$dst' does not match a CHAIN"
        status=1
      fi
      SRCS+=( "$src" )
      DSTS+=( "$dst" )
    else
      echo 1>&2 "$progname: error: invalid LINK specification \`$link'"
      status=1
    fi
  done
  [[ $status -eq 0 ]] || usage $status
}

show_plan() {
  echo "Here's the plan:"
  for i in ${!IDS[@]}; do
    id=${IDS[$i]}
    json=${JSONS[$i]}
    echo " create $id from $json"
  done
  for i in ${!SRCS[@]}; do
    src=${SRCS[$i]}
    dst=${DSTS[$i]}
    echo " link $src to $dst"
  done
}

usage() {
  status=$1
  if [[ $status -eq 0 ]]; then
    cat <<EOF
Usage: $progname [CONFIG]...
or: $progname [CHAIN|LINK]...

CONFIGs are found in \`$CONFIGS_DIR/CONFIG`.
If no arguments are supplied, use \`$DEFAULT_CONFIGS`.

Create configuration in \`$DATA' for:
 each CHAIN, which is \`ID=CONFIG'
 each LINK, which is \`SRCID:DSTID'
 
If no LINKS are supplied, use a circuit around the CHAINS.

EOF
    validate
    show_plan
  else
    echo "Try \`$progname --help' for more information"
  fi
  exit $status
}

while [[ $# -gt 0 ]]; do
  case "$1" in
  --help)
    usage 0
    ;;
  -*)
    echo 1>&2 "$progname: unrecognized optios \`$1'"
    usage 1
    ;;
  *=*) CHAINS+=( "$1" ) ;;
  *:*) LINKS+=( "$1" ) ;;
  *)
    generate_id "$1"
    CHAINS+=( "$id=$1" )
    ;;
  esac
  shift
done

validate
show_plan

echo
read -p 'Do you want to commit this plan to disk (y/N)? ' -n 1 -r do_commit
echo
case $do_commit in
[yY]*) ;; # continue
*)
  echo 1>&2 "Aborted at your request!"
  exit 2
  ;;
esac

# Fail on error.
set -e

#####################
# Create run-chainz

run=./run-chainz
echo "creating $run"
cat <<\EOF >"$run"
#! /bin/bash
# $run - create all the chains
# DO NOT EDIT - Automatically generated by $progname $args

trap 'pids=$(jobs -p); [[ -z $pids ]] || kill $pids' EXIT 

# Ensure gopath is set and go is installed
GOBIN=${GOBIN-${GOPATH-$HOME/go}/bin}
if [[ ! -d $GOPATH ]] || [[ ! -d $GOBIN ]] || [[ ! -x "$(which go)" ]]; then
  echo "Your \$GOPATH is not set or go is not installed,"
  echo "ensure you have a working installation of go before trying again..."
  echo "https://golang.org/doc/install"
  exit 1
fi

EOF

cat >>"$run" <<EOF
GAIA_REPO="$GOPATH/src/github.com/cosmos/gaia"
GAIA_BRANCH=ibc-alpha
DATA="$DATA"
EOF

cat >>"$run" <<\EOF
# ARGS: 
# $1 -> local || remote, defaults to remote

# Ensure user understands what will be deleted
if [[ -d $DATA ]] && [[ ! "$2" == "skip" ]]; then
  read -p "$progname will delete $DATA folder. Do you wish to continue? (y/N): " -n 1 -r
  echo 
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 1
  fi
fi
rm -rf "$DATA" &> /dev/null

echo "mkdir $DATA"
mkdir -p "$DATA"

set -e

echo "Generating chain configurations..."
cd "$DATA"
EOF

if [[ "$(uname)" == Darwin ]]; then
  sedi="sed -i ''"
else
  sedi="sed -i"
fi

base=0
for i in ${!IDS[@]}; do
  ID=${IDS[$i]}
  json=${JSONS[$i]}
  DAEMON=$(eval echo $(jq .daemon $json))
  CLI=$(eval echo $(jq .cli $json))

  cat >>"$run" <<EOF
chainid="$ID"
DAEMON="$DAEMON"
CLI="$CLI"
p26656=$(( 26656 - $i * 100 ))
p26657=$(( 26657 - $i * 100 ))
p26658=$(( 26658 - $i * 100 ))
p6060=$(( 6060 + $i ))
EOF

  sed -e "s/sed -i/$sedi/g" >>"$run" <<\EOF

echo -e "\n" | $DAEMON testnet -o $chainid --v 1 --chain-id $chainid --node-dir-prefix n --keyring-backend test &> /dev/null

cfgpth="$chainid/n0/$DAEMON/config/config.toml"
# TODO: Just index *some* specified tags, not all
sed -i 's/index_all_keys = false/index_all_keys = true/g' "$cfgpth"

# Set proper defaults and change ports
sed -i 's/"leveldb"/"goleveldb"/g' "$cfgpth"
sed -i "s#\"tcp://0.0.0.0:26656\"#\"tcp://0.0.0.0:$p26656\"#g" "$cfgpth"
sed -i "s#\"tcp://0.0.0.0:26657\"#\"tcp://0.0.0.0:$p26657\"#g" "$cfgpth"
sed -i "s#\"localhost:6060\"#\"localhost:$p6060\"#g" "$cfgpth"
sed -i "s#\"tcp://127.0.0.1:26658\"#\"tcp://127.0.0.1:$p26558\"#g" "$cfgpth"

# Make blocks run faster than normal
sed -i 's/timeout_commit = "[0-9]*s"/timeout_commit = "1s"/g' "$cfgpth"
sed -i 's/timeout_propose = "[0-9]*s"/timeout_propose = "1s"/g' "$cfgpth"

gclpth="$DATA/$chainid/n0/$CLI/"
$CLI config --home "$gclpth" chain-id $chainid &> /dev/null
$CLI config --home "$gclpth" output json &> /dev/null
$CLI config --home "$gclpth" node http://localhost:$p26657 &> /dev/null
EOF
done

for i in ${!IDS[@]}; do
  json=${JSONS[$i]}
  DAEMON=$(jq .daemon $json)
  ID=${IDS[$i]}
  chainid=$ID
  cat >>"$run" <<EOF

echo "'$DAEMON start ($ID) logs in $DATA/$ID.log"
$DAEMON --home "$DATA/$chainid/n0/$DAEMON" start --pruning=nothing > $chainid.log 2>&1 &
sleep 1
EOF
done

cat >>"$run" <<\EOF

echo "Ctrl-C exits, or you can background this script..."
wait
EOF
chmod +x "$run"

######################
# Create link-chainz

link=./link-chainz
echo "creating $link"
cat <<\EOF >"$link"
#/bin/bash

set -e
trap 'pids=$(jobs -p); [[ -z $pids ]] || kill $pids' EXIT 

# Ensure jq is installed
if [[ ! -x "$(which jq)" ]]; then
  echo "jq (a tool for parsing json in the command line) is required..."
  echo "https://stedolan.github.io/jq/download/"
  exit 1
fi

EOF

cat >>"$link" <<EOF
RELAYER_DIR="$RELAYER_DIR"
RELAYER_CONF="$HOME/.relayer"
DATA="$DATA"
EOF

cat >>"$link" <<\EOF

# Ensure user understands what will be deleted
if [[ -d $RELAYER_CONF ]] && [[ ! "$1" == "skip" ]]; then
  read -p "$0 will delete $RELAYER_CONF folder. Do you wish to continue? (y/n): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 1
  fi
fi

cd $RELAYER_DIR
rm -rf $RELAYER_CONF &> /dev/null

echo "Building Relayer..."
make install

echo "Generating rly configurations..."
rly config init
rly config add-dir configs/agoric/

SEED0=$(jq -r '.secret' $DATA/ibc0/n0/ag-cosmos-helper/key_seed.json)
SEED1=$(jq -r '.secret' $DATA/ibc1/n0/ag-cosmos-helper/key_seed.json)
echo 
echo "Key $(rly keys restore ibc0 testkey "$SEED0") imported from ibc0 to relayer..."
echo "Key $(rly keys restore ibc1 testkey "$SEED1") imported from ibc1 to relayer..."
echo
echo "Creating lite clients..."
echo
sleep 3
rly lite init ibc0 -f
rly lite init ibc1 -f

echo "Starting 'rly tx link demo' (ibc0<>ibc1) logs in data/zeroone.log"
rly tx link demo --timeout=3s 2>&1 > data/demo.log &
sleep 1

echo "Check the state of the connections using 'rly paths list' to see when they are ready to relay over..."
rly paths list

echo "Ctrl-C exits, or you can background this job..."
wait
EOF
chmod +x "$link"

#####################
echo "Done!  Now you can use $run and $link"
